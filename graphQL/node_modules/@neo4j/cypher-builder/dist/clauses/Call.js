"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Call = void 0;
const compile_cypher_if_exists_1 = require("../utils/compile-cypher-if-exists");
const pad_block_1 = require("../utils/pad-block");
const Clause_1 = require("./Clause");
const Union_1 = require("./Union");
const WithCreate_1 = require("./mixins/clauses/WithCreate");
const WithMatch_1 = require("./mixins/clauses/WithMatch");
const WithMerge_1 = require("./mixins/clauses/WithMerge");
const WithReturn_1 = require("./mixins/clauses/WithReturn");
const WithUnwind_1 = require("./mixins/clauses/WithUnwind");
const WithWith_1 = require("./mixins/clauses/WithWith");
const WithDelete_1 = require("./mixins/sub-clauses/WithDelete");
const WithRemove_1 = require("./mixins/sub-clauses/WithRemove");
const WithSet_1 = require("./mixins/sub-clauses/WithSet");
const ImportWith_1 = require("./sub-clauses/ImportWith");
const concat_1 = require("./utils/concat");
const mixin_1 = require("./utils/mixin");
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/clauses/call-subquery/)
 * @category Clauses
 */
let Call = class Call extends Clause_1.Clause {
    constructor(subquery) {
        super();
        // This is to preserve compatibility with innerWith and avoid breaking changes
        // Remove on 2.0.0
        this._usingImportWith = false;
        const rootQuery = subquery.getRoot();
        this.addChildren(rootQuery);
        this.subquery = rootQuery;
    }
    /** Adds a `WITH` statement inside `CALL {`, this `WITH` can is used to import variables outside of the subquery
     *  @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/subqueries/call-subquery/#call-importing-variables)
     */
    importWith(...params) {
        if (this._importWith)
            throw new Error("Call import already set");
        if (params.length > 0) {
            this._importWith = new ImportWith_1.ImportWith(this, [...params]);
            this.addChildren(this._importWith);
            this._usingImportWith = true;
        }
        return this;
    }
    inTransactions(config = {}) {
        this.inTransactionsConfig = config;
        return this;
    }
    /** @deprecated Use {@link importWith} instead */
    innerWith(...params) {
        if (this._importWith)
            throw new Error("Call import already set");
        if (params.length > 0) {
            this._importWith = new ImportWith_1.ImportWith(this, [...params]);
            this.addChildren(this._importWith);
        }
        return this;
    }
    /** @internal */
    getCypher(env) {
        const importWithCypher = (0, compile_cypher_if_exists_1.compileCypherIfExists)(this._importWith, env, { suffix: "\n" });
        const subQueryStr = this.getSubqueryCypher(env, importWithCypher);
        const removeCypher = (0, compile_cypher_if_exists_1.compileCypherIfExists)(this.removeClause, env, { prefix: "\n" });
        const deleteCypher = (0, compile_cypher_if_exists_1.compileCypherIfExists)(this.deleteClause, env, { prefix: "\n" });
        const setCypher = (0, compile_cypher_if_exists_1.compileCypherIfExists)(this.setSubClause, env, { prefix: "\n" });
        const inTransactionCypher = this.generateInTransactionStr();
        const inCallBlock = `${importWithCypher}${subQueryStr}`;
        const nextClause = this.compileNextClause(env);
        return `CALL {\n${(0, pad_block_1.padBlock)(inCallBlock)}\n}${inTransactionCypher}${setCypher}${removeCypher}${deleteCypher}${nextClause}`;
    }
    getSubqueryCypher(env, importWithCypher) {
        // This ensures the import with is added to all the union subqueries
        if (this._usingImportWith && (this.subquery instanceof Union_1.Union || this.subquery instanceof concat_1.CompositeClause)) {
            //TODO: try to embed the importWithCypher in the environment for a more generic solution
            return this.subquery.getCypher(env, importWithCypher);
        }
        return this.subquery.getCypher(env);
    }
    generateInTransactionStr() {
        if (!this.inTransactionsConfig) {
            return "";
        }
        const rows = this.inTransactionsConfig.ofRows;
        const error = this.inTransactionsConfig.onError;
        const ofRowsStr = rows ? ` OF ${rows} ROWS` : "";
        const onErrorStr = error ? ` ON ERROR ${this.getOnErrorStr(error)}` : "";
        return ` IN TRANSACTIONS${ofRowsStr}${onErrorStr}`;
    }
    getOnErrorStr(err) {
        const errorMap = {
            continue: "CONTINUE",
            break: "BREAK",
            fail: "FAIL",
        };
        if (!errorMap[err]) {
            throw new Error(`Incorrect ON ERROR option ${err}`);
        }
        return errorMap[err];
    }
};
exports.Call = Call;
exports.Call = Call = __decorate([
    (0, mixin_1.mixin)(WithReturn_1.WithReturn, WithWith_1.WithWith, WithUnwind_1.WithUnwind, WithRemove_1.WithRemove, WithDelete_1.WithDelete, WithSet_1.WithSet, WithMatch_1.WithMatch, WithCreate_1.WithCreate, WithMerge_1.WithMerge)
], Call);

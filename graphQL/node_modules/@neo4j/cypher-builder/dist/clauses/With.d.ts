import type { CypherEnvironment } from "../Environment";
import type { Literal } from "../references/Literal";
import type { Variable } from "../references/Variable";
import type { Expr } from "../types";
import { Clause } from "./Clause";
import { WithCreate } from "./mixins/clauses/WithCreate";
import { WithMatch } from "./mixins/clauses/WithMatch";
import { WithMerge } from "./mixins/clauses/WithMerge";
import { WithReturn } from "./mixins/clauses/WithReturn";
import { WithUnwind } from "./mixins/clauses/WithUnwind";
import { WithDelete } from "./mixins/sub-clauses/WithDelete";
import { WithOrder } from "./mixins/sub-clauses/WithOrder";
import { WithWhere } from "./mixins/sub-clauses/WithWhere";
export type WithProjection = Variable | [Expr, string | Variable | Literal];
export interface With extends WithOrder, WithReturn, WithWhere, WithDelete, WithMatch, WithUnwind, WithCreate, WithMerge {
}
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/clauses/with/)
 * @category Clauses
 */
export declare class With extends Clause {
    private projection;
    private isDistinct;
    private withStatement;
    constructor(...columns: Array<"*" | WithProjection>);
    addColumns(...columns: Array<"*" | WithProjection>): this;
    distinct(): this;
    /** @internal */
    getCypher(env: CypherEnvironment): string;
    /** Add a {@link With} clause
     * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/clauses/with/)
     */
    with(...columns: ("*" | WithProjection)[]): With;
}

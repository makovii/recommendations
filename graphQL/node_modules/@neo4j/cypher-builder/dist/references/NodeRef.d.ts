import type { Expr } from "..";
import { HasLabel } from "../expressions/HasLabel";
import { LabelExpr } from "../expressions/labels/label-expressions";
import type { NamedReference } from "./Variable";
import { Variable } from "./Variable";
export type NodeProperties = Record<string, Expr>;
type NodeRefOptions = {
    labels?: Set<string> | Array<string> | LabelExpr;
};
/** Represents a node reference
 * @group Variables
 */
export declare class NodeRef extends Variable {
    labels: string[] | LabelExpr;
    constructor();
    /** @deprecated Node labels should be defined in {@link Pattern} */
    constructor(options: NodeRefOptions);
    hasLabels(...labels: string[]): HasLabel;
    hasLabel(label: string | LabelExpr): HasLabel;
    private parseLabels;
}
/** Represents a node reference with a given name
 * @group Variables
 */
export declare class NamedNode extends NodeRef implements NamedReference {
    readonly id: string;
    constructor(id: string);
    /** @deprecated */
    constructor(id: string, options?: NodeRefOptions);
    get name(): string;
}
export {};

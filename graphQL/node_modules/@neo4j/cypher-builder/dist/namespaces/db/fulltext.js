"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.queryRelationships = exports.queryNodes = void 0;
const CypherProcedure_1 = require("../../procedures/CypherProcedure");
const normalize_variable_1 = require("../../utils/normalize-variable");
/** Returns all labels in the database
 * @see [Neo4j Documentation](https://neo4j.com/docs/operations-manual/current/reference/procedures/#procedure_db_index_fulltext_querynodes)
 * @group Procedures
 */
function queryNodes(indexName, queryString, options) {
    const procedureArgs = getFulltextArguments(indexName, queryString, options);
    return new CypherProcedure_1.CypherProcedure("db.index.fulltext.queryNodes", procedureArgs);
}
exports.queryNodes = queryNodes;
/** Returns all labels in the database
 * @see [Neo4j Documentation](https://neo4j.com/docs/operations-manual/current/reference/procedures/#procedure_db_index_fulltext_queryrelationships)
 * @group Procedures
 */
function queryRelationships(indexName, queryString, options) {
    const procedureArgs = getFulltextArguments(indexName, queryString, options);
    return new CypherProcedure_1.CypherProcedure("db.index.fulltext.queryRelationships", procedureArgs);
}
exports.queryRelationships = queryRelationships;
function getFulltextArguments(indexName, queryString, options) {
    const phraseVar = (0, normalize_variable_1.normalizeVariable)(queryString);
    const indexNameVar = (0, normalize_variable_1.normalizeVariable)(indexName);
    const procedureArgs = [indexNameVar, phraseVar];
    if (options) {
        const optionsMap = (0, normalize_variable_1.normalizeMap)(options);
        procedureArgs.push(optionsMap);
    }
    return procedureArgs;
}

import type { Literal, Param, Variable } from "../../Cypher";
import { CypherProcedure } from "../../procedures/CypherProcedure";
import type { InputArgument } from "../../utils/normalize-variable";
type FulltextPhrase = string | Literal<string> | Param | Variable;
/** Returns all labels in the database
 * @see [Neo4j Documentation](https://neo4j.com/docs/operations-manual/current/reference/procedures/#procedure_db_index_fulltext_querynodes)
 * @group Procedures
 */
export declare function queryNodes(indexName: string | Literal<string>, queryString: FulltextPhrase, options?: {
    skip?: InputArgument<number>;
    limit?: InputArgument<number>;
    analyser?: InputArgument<string>;
}): CypherProcedure<"node" | "score">;
/** Returns all labels in the database
 * @see [Neo4j Documentation](https://neo4j.com/docs/operations-manual/current/reference/procedures/#procedure_db_index_fulltext_queryrelationships)
 * @group Procedures
 */
export declare function queryRelationships(indexName: string | Literal<string>, queryString: FulltextPhrase, options?: {
    skip?: InputArgument<number>;
    limit?: InputArgument<number>;
    analyser?: InputArgument<string>;
}): CypherProcedure<"relationship" | "score">;
export {};

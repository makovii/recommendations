"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.reduce = exports.toStringList = exports.toIntegerList = exports.toFloatList = exports.toBooleanList = exports.tail = exports.reverse = exports.range = exports.labels = exports.keys = void 0;
const filter_truthy_1 = require("../../utils/filter-truthy");
const normalize_variable_1 = require("../../utils/normalize-variable");
const CypherFunctions_1 = require("./CypherFunctions");
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/list/#functions-keys)
 * @group Cypher Functions
 * @category List
 */
function keys(expr) {
    return new CypherFunctions_1.CypherFunction("keys", [expr]);
}
exports.keys = keys;
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/list/#functions-labels)
 * @group Cypher Functions
 * @category List
 */
function labels(nodeRef) {
    return new CypherFunctions_1.CypherFunction("labels", [nodeRef]);
}
exports.labels = labels;
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/list/#functions-range)
 * @group Cypher Functions
 * @category List
 */
function range(start, end, step) {
    const params = (0, filter_truthy_1.filterTruthy)([start, end, step]).map(normalize_variable_1.normalizeExpr);
    return new CypherFunctions_1.CypherFunction("range", params);
}
exports.range = range;
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/list/#functions-reverse-list)
 * @group Cypher Functions
 * @category List
 */
function reverse(list) {
    return new CypherFunctions_1.CypherFunction("reverse", [list]);
}
exports.reverse = reverse;
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/list/#functions-tail)
 * @group Cypher Functions
 * @category List
 */
function tail(list) {
    return new CypherFunctions_1.CypherFunction("tail", [list]);
}
exports.tail = tail;
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/list/#functions-tobooleanlist)
 * @group Cypher Functions
 * @category List
 */
function toBooleanList(list) {
    return new CypherFunctions_1.CypherFunction("toBooleanList", [list]);
}
exports.toBooleanList = toBooleanList;
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/list/#functions-tofloatlist)
 * @group Cypher Functions
 * @category List
 */
function toFloatList(list) {
    return new CypherFunctions_1.CypherFunction("toFloatList", [list]);
}
exports.toFloatList = toFloatList;
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/list/#functions-tointegerlist)
 * @group Cypher Functions
 * @category List
 */
function toIntegerList(list) {
    return new CypherFunctions_1.CypherFunction("toIntegerList", [list]);
}
exports.toIntegerList = toIntegerList;
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/list/#functions-tostringlist)
 * @group Cypher Functions
 * @category List
 */
function toStringList(list) {
    return new CypherFunctions_1.CypherFunction("toStringList", [list]);
}
exports.toStringList = toStringList;
/** Reduce a list by executing given expression.
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/list/#functions-reduce)
 * @group Cypher Functions
 * @category List
 * @example
 * ```ts
 * Cypher.reduce(totalAge, new Cypher.Literal(0), n, Cypher.nodes(p), Cypher.plus(totalAge, n.property("age")));
 * ```
 * _Cypher:_
 * ```cypher
 * reduce(totalAge = 0, n IN nodes(p) | totalAge + n.age)
 * ```
 */
function reduce(accVariable, defaultValue, variable, listExpr, mapExpr) {
    return new ReducerFunction({
        accVariable,
        defaultValue,
        variable,
        listExpr,
        mapExpr,
    });
}
exports.reduce = reduce;
class ReducerFunction extends CypherFunctions_1.CypherFunction {
    constructor({ accVariable, defaultValue, variable, listExpr, mapExpr, }) {
        super("reduce");
        this.accVariable = accVariable;
        this.defaultValue = defaultValue;
        this.variable = variable;
        this.listExpr = listExpr;
        this.mapExpr = mapExpr;
    }
    getCypher(env) {
        const accStr = `${this.accVariable.getCypher(env)} = ${this.defaultValue.getCypher(env)}`;
        const variableStr = this.variable.getCypher(env);
        const listExprStr = this.listExpr.getCypher(env);
        const mapExprStr = this.mapExpr.getCypher(env);
        return `${this.name}(${accStr}, ${variableStr} IN ${listExprStr} | ${mapExprStr})`;
    }
}

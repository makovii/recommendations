"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CypherAggregationFunction = exports.stDevP = exports.stDev = exports.percentileDisc = exports.percentileCont = exports.collect = exports.sum = exports.avg = exports.max = exports.min = exports.count = void 0;
const normalize_variable_1 = require("../../utils/normalize-variable");
const CypherFunctions_1 = require("./CypherFunctions");
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/aggregating/#functions-count)
 * @group Cypher Functions
 * @category Aggregations
 */
function count(expr) {
    return new CypherAggregationFunction("count", [expr]);
}
exports.count = count;
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/aggregating/#functions-min)
 * @group Cypher Functions
 * @category Aggregations
 */
function min(expr) {
    return new CypherAggregationFunction("min", [expr]);
}
exports.min = min;
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/aggregating/#functions-max)
 * @group Cypher Functions
 * @category Aggregations
 */
function max(expr) {
    return new CypherAggregationFunction("max", [expr]);
}
exports.max = max;
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/aggregating/#functions-avg)
 * @group Cypher Functions
 * @category Aggregations
 */
function avg(expr) {
    return new CypherAggregationFunction("avg", [expr]);
}
exports.avg = avg;
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/aggregating/#functions-sum)
 * @group Cypher Functions
 * @category Aggregations
 */
function sum(expr) {
    return new CypherAggregationFunction("sum", [expr]);
}
exports.sum = sum;
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/aggregating/#functions-collect)
 * @group Cypher Functions
 * @category Aggregations
 */
function collect(expr) {
    return new CypherAggregationFunction("collect", [expr]);
}
exports.collect = collect;
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/aggregating/#functions-percentilecont)
 * @group Cypher Functions
 * @category Aggregations
 */
function percentileCont(expr, percentile) {
    const normalizedPercentile = (0, normalize_variable_1.normalizeExpr)(percentile);
    return new CypherAggregationFunction("percentileCont", [expr, normalizedPercentile]);
}
exports.percentileCont = percentileCont;
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/aggregating/#functions-percentiledisc)
 * @group Cypher Functions
 * @category Aggregations
 */
function percentileDisc(expr, percentile) {
    const normalizedPercentile = (0, normalize_variable_1.normalizeExpr)(percentile);
    return new CypherAggregationFunction("percentileDisc", [expr, normalizedPercentile]);
}
exports.percentileDisc = percentileDisc;
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/aggregating/#functions-stdev)
 * @group Cypher Functions
 * @category Aggregations
 */
function stDev(expr) {
    return new CypherAggregationFunction("stDev", [expr]);
}
exports.stDev = stDev;
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/aggregating/#functions-stdevp)
 * @group Cypher Functions
 * @category Aggregations
 */
function stDevP(expr) {
    return new CypherAggregationFunction("stDevP", [expr]);
}
exports.stDevP = stDevP;
/** Represents a Cypher Aggregation function
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/aggregating)
 * @group Cypher Functions
 * @category Aggregations
 */
class CypherAggregationFunction extends CypherFunctions_1.CypherFunction {
    /**
     * @internal
     */
    constructor(name, params) {
        super(name);
        this.hasDistinct = false;
        this.hasStar = false;
        for (const param of params) {
            if (param === "*") {
                this.hasStar = true;
            }
            else {
                this.addParam(param);
            }
        }
    }
    /**
     * Adds DISTINCT to remove duplicates on the aggregation functions
     * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/aggregating/#_counting_with_and_without_duplicates)
     */
    distinct() {
        if (this.hasStar) {
            throw new Error("count(*) is not supported with DISTINCT");
        }
        this.hasDistinct = true;
        return this;
    }
    /** @internal */
    getCypher(env) {
        const argsStr = this.hasStar ? "*" : this.serializeParams(env);
        const distinctStr = this.hasDistinct ? "DISTINCT " : "";
        return `${this.name}(${distinctStr}${argsStr})`;
    }
}
exports.CypherAggregationFunction = CypherAggregationFunction;

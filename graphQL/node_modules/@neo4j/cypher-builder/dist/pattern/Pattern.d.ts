import type { CypherEnvironment } from "../Environment";
import { WithWhere } from "../clauses/mixins/sub-clauses/WithWhere";
import type { LabelExpr } from "../expressions/labels/label-expressions";
import { Variable } from "../references/Variable";
import type { Expr } from "../types";
import type { LengthOption } from "./PartialPattern";
import { PartialPattern } from "./PartialPattern";
import { PatternElement } from "./PatternElement";
export type NodePattern = {
    labels?: string | string[] | LabelExpr;
    properties?: Record<string, Expr>;
};
export type RelationshipPattern = {
    type?: string | LabelExpr;
    properties?: Record<string, Expr>;
    direction?: "left" | "right" | "undirected";
    length?: LengthOption;
};
export interface Pattern extends WithWhere {
}
/** Represents a pattern of a single node or n-relationships to be used in clauses.
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/syntax/patterns/)
 * @group Patterns
 */
export declare class Pattern extends PatternElement {
    private withLabels;
    private withVariable;
    private previous;
    private properties;
    private labels;
    constructor(node: Variable, options?: NodePattern);
    constructor(nodeConfig: NodePattern);
    /** @internal */
    constructor(nodeVariable?: Variable | NodePattern, options?: NodePattern, previous?: PartialPattern);
    /** @deprecated */
    withoutLabels(): this;
    /** @deprecated */
    withoutVariable(): this;
    /** @deprecated Use `properties` field when creating the Pattern: `new Cypher.Pattern({ variable: node, properties: myProperties })` */
    withProperties(properties: Record<string, Expr>): this;
    related(ref?: Variable, options?: RelationshipPattern): PartialPattern;
    related(ref: RelationshipPattern): PartialPattern;
    /** @deprecated This method won't be available in future versions as variables will not be autogenerated by Patterns anymore. */
    getVariables(): Variable[];
    /**
     * @internal
     */
    getCypher(env: CypherEnvironment): string;
    private getLabelsStr;
}
